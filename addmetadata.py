import argparse
import tensorflow as tf
from tflite_support.metadata_writers import object_detector
from tflite_support.metadata_writers import writer_utils

# Create an argument parser to accept user input for model and label file paths
parser = argparse.ArgumentParser(description='Add metadata to a TensorFlow Lite object detection model.')
parser.add_argument('model_path', type=str, help='Path to the TFLite model file.')
parser.add_argument('label_path', type=str, help='Path to the label file.')

args = parser.parse_args()

# Create the metadata writer.
writer = object_detector.MetadataWriter.create_for_inference(
    tf.lite.model_path(args.model_path),
    [127.5],
    [127.5],
    [args.label_path])

# Verify the metadata generated by the metadata writer.
print(writer.get_metadata_json())

# Populate the metadata into the model.
output_model_path = "result_model.tflite"  # Change this as needed
writer_utils.save_file(writer.populate(), output_model_path)

# Display the metadata in the model.
displayer = metadata.MetadataDisplayer.with_model_file(output_model_path)
print("Metadata populated:")
print(displayer.get_metadata_json())

print("Associated file(s) populated:")
for file_name in displayer.get_packed_associated_file_list():
    print("file name: ", file_name)
    print("file content:")
    print(displayer.get_associated_file_buffer(file_name))
